문제 설명
한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
입출력 예
numbers	return
"17"	3
"011"	2
입출력 예 설명
예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.

결과
import java.util.*;

class Solution {
    // 조합된 수 중복 없이 저장하기위한 hashset
    static HashSet<Integer> numberSet = new HashSet<Integer>();
    
    public int solution(String numbers) {
	recursive("", numbers); // 재귀함수를 이용하여 조합한다.
	int count = 0;
	Iterator<Integer> iterator = numberSet.iterator();
	while(iterator.hasNext()) {
		int num = iterator.next();
		if(isCount(num)) 
			count ++;
    }
        
    return count;
        
    }
    
    static public void recursive(String comb, String others) { // 빈 문자열과 numbers 문자열을 받기
		if(!comb.equals("")) {
		numberSet.add(Integer.parseInt(comb)); 
		}
        
        // 문자열을 파싱하여 i의 인덱스와 중복되지 않은 문자를 other에 넣어 다시 재귀로 돌려 조합하기
		for (int i = 0; i < others.length(); i++) {
		recursive(comb + others.charAt(i), others.substring(0, i) + others.substring(i + 1));
		}
	}
    
    // 조합된 hashset을 에라토스테네스의 체를 이용하여 소수 찾기
    // 에라토스테네스는 입력받은 수의 루트값 까지 리미트를 걸어 2부터 리미트 까지의 수를 나누어 떨어지는 수가 없으면 소수
    static boolean isCount(int a) {
		if(a == 0 || a == 1) 
			return false;
		
		int limit = (int)Math.sqrt(a);
		
		for(int i = 2; i <= limit; i++) {
			if(a % i == 0)
				return false;
		}
		return true;
	}
    
}
